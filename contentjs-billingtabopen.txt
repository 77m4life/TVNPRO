(function() {
    'use strict';

    const MAX_TAIKHOAN = 25;
    const DELAY_MS = 10;
    const BATCH_SIZE = 8;
    const iconUrl = 'https://raw.githubusercontent.com/77m4life/TVNPRO/refs/heads/main/tvnpro.png';

    function convertUrl(url) {
        try {
            const u = new URL(url);
            if (u.pathname.includes('/nav/login')) {
                u.pathname = '/aw/billing/signup';
                return u.toString();
            }
        } catch(e) {
            return url;
        }
        return url;
    }

    // Tạo container cho các nút
    const buttonContainer = document.createElement('div');
    buttonContainer.style.cssText = `
        position: fixed;
        bottom: 25px;
        right: 25px;
        z-index: 10000;
        display: flex;
        flex-direction: column;
        gap: 12px;
        align-items: center;
        font-family: 'Segoe UI', Arial, sans-serif;
    `;

    // Tạo nút mở tab với hiệu ứng hiện đại
    const openButton = document.createElement('button');
    const openImg = document.createElement('img');
    openImg.src = iconUrl;
    openImg.alt = 'Open Accounts';
    openImg.style.width = '70px';
    openImg.style.height = '70px';
    openImg.style.borderRadius = '50%';
    openImg.style.objectFit = 'cover';
    openImg.style.transition = 'all 0.2s ease';

    openButton.appendChild(openImg);

    // Tạo nút KIỂM TRA mới
    const checkButton = document.createElement('button');
    checkButton.innerHTML = `
        <div style="font-size: 18px; font-weight: bold;">✓</div>
        <div style="font-size: 9px; margin-top: 2px;">KIỂM TRA</div>
    `;
    checkButton.title = 'Kiểm tra trạng thái tài khoản';
    checkButton.style.cssText = `
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        line-height: 1.2;
        font-weight: 600;
    `;

    // Tạo nút đóng tab (giữ nguyên chức năng)
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '✕';
    closeButton.title = 'Đóng 50 Tab Tài Khoản';
    closeButton.style.cssText = `
        width: 50px;
        height: 50px;
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        font-size: 20px;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 6px 20px rgba(245, 87, 108, 0.4);
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
    `;

    // Tạo panel hiển thị kết quả kiểm tra
    const resultPanel = document.createElement('div');
    resultPanel.style.cssText = `
        position: fixed;
        bottom: 200px;
        right: 25px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.2);
        z-index: 9999;
        min-width: 280px;
        max-width: 350px;
        font-family: 'Segoe UI', Arial, sans-serif;
        display: none;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    `;

    // Style hiện đại cho nút mở
    Object.assign(openButton.style, {
        width: '80px',
        height: '80px',
        padding: '5px',
        backgroundColor: 'rgba(255, 255, 255, 0.95)',
        border: 'none',
        borderRadius: '50%',
        cursor: 'pointer',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        boxShadow: '0 8px 25px rgba(0, 0, 0, 0.15), 0 0 0 2px rgba(74, 144, 226, 0.1)',
        transition: 'all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)',
        backdropFilter: 'blur(10px)',
        WebkitBackdropFilter: 'blur(10px)'
    });

    // Hiệu ứng hover cho nút mở
    openButton.addEventListener('mouseenter', () => {
        if (isOpeningTabs) return;
        openButton.style.transform = 'scale(1.1) translateY(-2px)';
        openButton.style.boxShadow = '0 12px 35px rgba(0, 0, 0, 0.2), 0 0 0 3px rgba(74, 144, 226, 0.3)';
        openImg.style.transform = 'rotate(5deg)';
    });

    openButton.addEventListener('mouseleave', () => {
        openButton.style.transform = 'scale(1) translateY(0)';
        openButton.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.15), 0 0 0 2px rgba(74, 144, 226, 0.1)';
        openImg.style.transform = 'rotate(0deg)';
    });

    // Hiệu ứng hover cho nút kiểm tra
    checkButton.addEventListener('mouseenter', () => {
        if (isChecking) return;
        checkButton.style.transform = 'scale(1.1) translateY(-2px)';
        checkButton.style.boxShadow = '0 12px 35px rgba(102, 126, 234, 0.5)';
    });

    checkButton.addEventListener('mouseleave', () => {
        checkButton.style.transform = 'scale(1) translateY(0)';
        checkButton.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.4)';
    });

    // Hiệu ứng hover cho nút đóng
    closeButton.addEventListener('mouseenter', () => {
        if (isClosingTabs) return;
        closeButton.style.transform = 'scale(1.1) translateY(-2px)';
        closeButton.style.boxShadow = '0 12px 35px rgba(245, 87, 108, 0.5)';
    });

    closeButton.addEventListener('mouseleave', () => {
        closeButton.style.transform = 'scale(1) translateY(0)';
        closeButton.style.boxShadow = '0 6px 20px rgba(245, 87, 108, 0.4)';
    });

    // Biến để kiểm soát việc mở và đóng tab
    let isOpeningTabs = false;
    let isClosingTabs = false;
    let isChecking = false;
    let progress = 0;
    let currentTabData = null; // Lưu dữ liệu tab hiện tại

    // Tạo progress bar
    const progressBar = document.createElement('div');
    progressBar.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 0%;
        height: 3px;
        background: linear-gradient(90deg, #4a90e2, #5cb85c);
        z-index: 10001;
        transition: width 0.1s ease;
        box-shadow: 0 0 10px rgba(74, 144, 226, 0.5);
    `;
    document.body.appendChild(progressBar);

    // Thêm sự kiện click cho nút mở tab
    openButton.addEventListener('click', async () => {
        if (isOpeningTabs || isClosingTabs || isChecking) return;
        
        const links = Array.from(document.querySelectorAll('a'))
                        .filter(a => a.href && a.href.includes('ads.google.com'));
        const openCount = Math.min(links.length, MAX_TAIKHOAN);
        
        if (openCount === 0) {
            showNotification('Không tìm thấy link Google Ads nào!', 'error');
            return;
        }
        
        // Đánh dấu đang mở tab
        isOpeningTabs = true;
        progress = 0;
        
        // Hiệu ứng loading
        openButton.style.background = 'rgba(74, 144, 226, 0.9)';
        openButton.style.cursor = 'default';
        openImg.style.filter = 'brightness(0) invert(1)';
        
        // Hiển thị thông báo bắt đầu
        showNotification(`Đang mở ${openCount} tab trong Chrome...`, 'info');

        try {
            // Chuẩn bị URLs để gửi đến background script
            const urls = links.slice(0, openCount).map(link => {
                const originalUrl = link.href;
                return convertUrl(originalUrl);
            });

            // Gửi message đến background script để mở tabs
            const response = await chrome.runtime.sendMessage({
                action: 'openTabs',
                urls: urls,
                delay: DELAY_MS,
                batchSize: BATCH_SIZE
            });

            if (response.success) {
                const { openedCount, duration } = response;
                showNotification(`✅ Đã mở ${openedCount} tab trong ${duration.toFixed(1)}s!`, 'success');
                
                // Cập nhật progress hoàn thành
                progressBar.style.width = '100%';
            } else {
                showNotification(response.error || '❌ Có lỗi xảy ra khi mở tab', 'error');
            }
            
        } catch (error) {
            console.error('Lỗi khi mở tab:', error);
            showNotification('❌ Có lỗi xảy ra khi mở tab', 'error');
        } finally {
            completeOpening();
        }
    });

    // Thêm sự kiện click cho nút KIỂM TRA
    checkButton.addEventListener('click', async () => {
        if (isChecking || isOpeningTabs || isClosingTabs) return;
        
        isChecking = true;
        
        // Hiệu ứng loading
        checkButton.style.background = 'linear-gradient(135deg, #4a90e2 0%, #5cb85c 100%)';
        checkButton.style.cursor = 'default';
        checkButton.innerHTML = `
            <div style="font-size: 16px;">⏳</div>
            <div style="font-size: 9px; margin-top: 2px;">ĐANG KIỂM TRA</div>
        `;

        try {
            // Gửi message đến background script để kiểm tra tabs
            const response = await chrome.runtime.sendMessage({
                action: 'checkTabs'
            });

            if (response.success) {
                currentTabData = response; // Lưu dữ liệu tab
                displayCheckResults(response);
            } else {
                showNotification(response.error || '❌ Có lỗi xảy ra khi kiểm tra', 'error');
                resetCheckButton();
            }
            
        } catch (error) {
            console.error('Lỗi khi kiểm tra:', error);
            showNotification('❌ Có lỗi xảy ra khi kiểm tra', 'error');
            resetCheckButton();
        }
    });

    // Thêm sự kiện click cho nút đóng tab (giữ nguyên chức năng)
    closeButton.addEventListener('click', async () => {
        if (isClosingTabs || isOpeningTabs || isChecking) return;
        
        // Đánh dấu đang đóng tab
        isClosingTabs = true;
        
        // Hiệu ứng loading
        closeButton.style.background = 'rgba(217, 83, 79, 1)';
        closeButton.style.cursor = 'default';
        
        // Hiển thị thông báo bắt đầu
        showNotification('Đang đóng các tab tài khoản...', 'info');

        try {
            // Gửi message đến background script để đóng tabs
            const response = await chrome.runtime.sendMessage({
                action: 'closeTabs',
                maxTabs: MAX_TAIKHOAN
            });

            if (response.success) {
                const { closedCount, duration } = response;
                showNotification(`✅ Đã đóng ${closedCount} tab trong ${duration.toFixed(1)}s!`, 'success');
            } else {
                showNotification(response.error || '❌ Có lỗi xảy ra khi đóng tab', 'error');
            }
            
        } catch (error) {
            console.error('Lỗi khi đóng tab:', error);
            showNotification('❌ Có lỗi xảy ra khi đóng tab', 'error');
        } finally {
            completeClosing();
        }
    });

    // Hàm hiển thị kết quả kiểm tra
    function displayCheckResults(data) {
        const { completedAccounts, incompleteAccounts, incompletePositions, incompleteTabs } = data;
        
        const totalAccounts = completedAccounts + incompleteAccounts;
        
        // Tạo danh sách vị trí có thể click
        const positionItems = incompletePositions.map(position => {
            const tabInfo = incompleteTabs.find(tab => tab.index === position);
            const tabId = tabInfo ? tabInfo.id : null;
            return `
                <span class="position-item" data-tab-id="${tabId}" data-position="${position}" 
                      style="display: inline-block; margin: 2px; padding: 4px 8px; 
                             background: #ff9800; color: white; border-radius: 12px; 
                             font-size: 11px; cursor: pointer; transition: all 0.2s;
                             font-weight: 500; min-width: 20px; text-align: center;"
                      onmouseover="this.style.background='#f57c00'; this.style.transform='scale(1.1)'"
                      onmouseout="this.style.background='#ff9800'; this.style.transform='scale(1)'">
                    ${position}
                </span>
            `;
        }).join('');

        resultPanel.innerHTML = `
            <div style="margin-bottom: 16px;">
                <h3 style="margin: 0 0 12px 0; color: #2c3e50; font-size: 16px; font-weight: 600;">
                    📊 BÁO CÁO TÀI KHOẢN
                </h3>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <span style="color: #666; font-size: 13px;">Tổng số tài khoản:</span>
                    <span style="font-weight: 600; color: #2c3e50;">${totalAccounts}</span>
                </div>
            </div>
            
            <div style="display: flex; gap: 15px; margin-bottom: 16px;">
                <div style="flex: 1; text-align: center; padding: 12px; background: linear-gradient(135deg, #e8f5e8, #c8e6c9); border-radius: 12px;">
                    <div style="font-size: 24px; font-weight: bold; color: #2e7d32;">${completedAccounts}</div>
                    <div style="font-size: 11px; color: #388e3c; font-weight: 500;">HOÀN THÀNH</div>
                </div>
                <div style="flex: 1; text-align: center; padding: 12px; background: linear-gradient(135deg, #fff3e0, #ffe0b2); border-radius: 12px;">
                    <div style="font-size: 24px; font-weight: bold; color: #f57c00;">${incompleteAccounts}</div>
                    <div style="font-size: 11px; color: #f57c00; font-weight: 500;">CHƯA HOÀN THÀNH</div>
                </div>
            </div>
            
            ${incompletePositions.length > 0 ? `
            <div style="background: #fff3e0; padding: 12px; border-radius: 8px; border-left: 4px solid #ff9800;">
                <div style="font-size: 12px; color: #e65100; font-weight: 600; margin-bottom: 8px;">
                    ⚠️ TAB CHƯA HOÀN THÀNH
                </div>
                <div style="font-size: 11px; color: #ef6c00; margin-bottom: 8px;">
                    Click vào số để nhảy đến tab:
                </div>
                <div style="display: flex; flex-wrap: wrap; gap: 4px; margin-bottom: 8px;">
                    ${positionItems}
                </div>
                <div style="font-size: 10px; color: #ff6d00; font-style: italic;">
                    💡 Vị trí tính từ tab thứ 2 là tab 1
                </div>
            </div>
            ` : `
            <div style="background: #e8f5e8; padding: 12px; border-radius: 8px; border-left: 4px solid #4caf50;">
                <div style="font-size: 12px; color: #2e7d32; font-weight: 600;">
                    ✅ TẤT CẢ ĐÃ HOÀN THÀNH
                </div>
            </div>
            `}
            
            <div style="margin-top: 16px; text-align: center;">
                <button id="closePanel" style="
                    background: #667eea; 
                    color: white; 
                    border: none; 
                    padding: 8px 16px; 
                    border-radius: 20px; 
                    font-size: 11px; 
                    cursor: pointer;
                    font-weight: 500;
                    transition: all 0.2s;
                " onmouseover="this.style.background='#5a6fd8'" onmouseout="this.style.background='#667eea'">Đóng báo cáo</button>
            </div>
        `;

        // Hiển thị panel với hiệu ứng
        resultPanel.style.display = 'block';
        setTimeout(() => {
            resultPanel.style.opacity = '1';
            resultPanel.style.transform = 'translateY(0)';
        }, 10);

        // Thêm sự kiện click cho các vị trí
        setTimeout(() => {
            const positionItems = resultPanel.querySelectorAll('.position-item');
            positionItems.forEach(item => {
                item.addEventListener('click', async (e) => {
                    const tabId = parseInt(e.target.getAttribute('data-tab-id'));
                    const position = parseInt(e.target.getAttribute('data-position'));
                    
                    if (tabId) {
                        try {
                            // Kích hoạt tab và đưa lên foreground
                            await chrome.runtime.sendMessage({
                                action: 'activateTab',
                                tabId: tabId
                            });
                            
                            // Hiệu ứng visual khi click
                            e.target.style.background = '#4caf50';
                            e.target.style.color = 'white';
                            setTimeout(() => {
                                e.target.style.background = '#ff9800';
                            }, 500);
                            
                            showNotification(`✅ Đã chuyển đến tab vị trí ${position}`, 'success');
                        } catch (error) {
                            console.error('Lỗi khi kích hoạt tab:', error);
                            showNotification('❌ Không thể chuyển đến tab', 'error');
                        }
                    }
                });
            });
        }, 100);

        // Sự kiện đóng panel
        document.getElementById('closePanel').addEventListener('click', hideResultPanel);

        // Khôi phục nút kiểm tra
        resetCheckButton();
    }

    function hideResultPanel() {
        resultPanel.style.opacity = '0';
        resultPanel.style.transform = 'translateY(20px)';
        setTimeout(() => {
            resultPanel.style.display = 'none';
        }, 300);
    }

    function resetCheckButton() {
        isChecking = false;
        checkButton.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
        checkButton.style.cursor = 'pointer';
        checkButton.innerHTML = `
            <div style="font-size: 18px; font-weight: bold;">✓</div>
            <div style="font-size: 9px; margin-top: 2px;">KIỂM TRA</div>
        `;
    }

    function completeOpening() {
        setTimeout(() => {
            isOpeningTabs = false;
            
            // Khôi phục nút mở
            openButton.style.background = 'rgba(255, 255, 255, 0.95)';
            openButton.style.cursor = 'pointer';
            openImg.style.filter = 'none';
            
            // Hiệu ứng hoàn thành
            openButton.style.transform = 'scale(1.05)';
            setTimeout(() => {
                openButton.style.transform = 'scale(1)';
            }, 200);
            
            // Ẩn progress bar sau 1.5s
            setTimeout(() => {
                progressBar.style.width = '0%';
            }, 1500);
        }, 300);
    }

    function completeClosing() {
        setTimeout(() => {
            isClosingTabs = false;
            
            // Khôi phục nút đóng
            closeButton.style.background = 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)';
            closeButton.style.cursor = 'pointer';
            
            // Hiệu ứng hoàn thành
            closeButton.style.transform = 'scale(1.05)';
            setTimeout(() => {
                closeButton.style.transform = 'scale(1)';
            }, 200);
            
            // Ẩn progress bar sau 1.5s
            setTimeout(() => {
                progressBar.style.width = '0%';
            }, 1500);
        }, 300);
    }

    // Hàm hiển thị thông báo
    function showNotification(message, type = 'info') {
        const oldNotification = document.querySelector('.fast-notification');
        if (oldNotification) {
            oldNotification.remove();
        }
        
        const notification = document.createElement('div');
        const colors = {
            info: '#4a90e2',
            success: '#5cb85c',
            error: '#d9534f'
        };
        
        notification.className = 'fast-notification';
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${colors[type]};
            color: white;
            padding: 10px 16px;
            border-radius: 6px;
            z-index: 10002;
            font-family: Arial, sans-serif;
            font-size: 13px;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transform: translateX(0);
            transition: all 0.2s ease;
            max-width: 300px;
            word-wrap: break-word;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 200);
        }, 2500);
    }

    // Thêm các nút vào container
    buttonContainer.appendChild(checkButton);
    buttonContainer.appendChild(closeButton);
    buttonContainer.appendChild(openButton);
    
    // Thêm panel vào body
    document.body.appendChild(resultPanel);
    document.body.appendChild(buttonContainer);

    // Thêm CSS tối ưu
    const style = document.createElement('style');
    style.textContent = `
        @keyframes quickPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
        
        .quick-pulse {
            animation: quickPulse 0.3s ease-in-out;
        }
        
        .position-item {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .position-item:hover {
            transform: scale(1.1);
            box-shadow: 0 2px 8px rgba(255, 152, 0, 0.3);
        }
        
        /* Đóng panel khi click ra ngoài */
        .panel-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: transparent;
            z-index: 9998;
        }
    `;
    document.head.appendChild(style);
})();
